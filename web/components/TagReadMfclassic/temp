
                            case 'pipe-created':
                                switch (data.pipe_type) {
                                    case 'pipeKeyFile':
                                        this.read_percent = 15;
                                        break;
                                
                                    default:
                                        break;
                                }
                                break;
                            
                            case 'keyfile-preload-finished':
                                this.read_percent = 8;
                                break;
                            case 'keyfile-check-started':
                                this.read_percent = 11;
                                break;
                            case 'key-scanned':
                                this.read_percent = 25;
                                break;
                            case 'key-processed':
                                this.read_percent = 30;
                                if (log) {
                                    const el = document.createElement('div');
                                    el.innerText = `密钥处理完成，密钥为：\n    ${data.result?.join?.(',')}`;
                                    log.append(el);
                                }
                                break;
                            case 'card-read-ended':
                                this.read_percent = 95;
                                break;
                            case 'card-read':
                                this.read_percent = 98;
                                break;






            return;
            const senderId = String(new Date().getTime());
            const handler = (ws, data) => {
                if (data.senderId != senderId) return;
                appInstance_.ws.deleteHandler('session-created', handler);
                this.sessionId = data.sessionId;

                this.page = 3;
                queueMicrotask(() => {
                    appInstance_.ws.registerSessionHandler(this.sessionId, (ws, data) => {
                        const log = this.$refs.logDiv;
                        switch (data.type) {
                            case 'pipe-created':
                                switch (data.pipe) {
                                    case 'pipeKeyFile':
                                        this.read_percent = 5;
                                        break;
                                
                                    default:
                                        break;
                                }
                                break;
                            
                            case 'tag-info-loaded':
                                this.read_percent = 10;
                                if (log) try {
                                    const d = JSON.parse(data.data);
                                    const el = document.createElement('div');
                                    el.innerText = `标签查询成功！标签信息：\n    UID: ${d.uid}\n   ATQA: ${d.atqa}\n    SAK: ${d.sak}`;
                                    log.append(el);
                                } catch (err) { console.warn('[reader]', 'unhandled error:', err) }
                                break;
                            
                            case 'tag-read-started':
                                this.read_percent = 20;
                                tickManager.add(this);
                                tickManager.ontick(this.ontick);
                                break;

                            case 'run-log':
                                if (log) {
                                    log.append(document.createTextNode(data.data));
                                }
                                break;
                            
                            case 'action-ended':
                                if (!data.success) {
                                    this.page = 10002;
                                    this.errorText = data.errorText;
                                    queueMicrotask(() => this.分析错误());
                                } else {
                                    this.page = 9999;
                                    // this.isDone = true;
                                    this.dumpFile = data.file;
                                    this.read_percent = 100;
                                }
                                tickManager.delete(this);
                                tickManager.cancel_ontick(this.ontick);
                                // console.log('AE', data);
                                break;
                            
                            default:
                                if (typeof data !== 'string')
                                    console.warn('[tag-read]', 'unknown data type:', data);
                        }
                        // if (log) {
                        //     const el = document.createElement('div');
                        //     el.innerText = JSON.stringify(data, null, 2);
                        //     log.append(el);
                        // }
                    });
                    appInstance_.ws.s({
                        type: 'read-nfc-tag-mfclassic',
                        sessionId: this.sessionId,
                        keyfiles: this.userkeyfile.sort().join('|'),
                        use_mfoc: this.use_mfoc,
                        unlock: this.unlockuid,
                        sector_range: this.sectorAll ? [] : [+this.sectorStart, +this.sectorEnd],
                    });
                    this.read_percent = 2;
                });
            }
            appInstance_.ws.registerHandler('session-created', handler);
            const handler_end = (ws, data) => {
                if (data.sessionId != this.sessionId) return;
                appInstance_.ws.deleteHandler('session-ended', handler_end);
                
                if (this.page < 100) {
                    this.page = 10001;
                    this.errorText = '服务器意外中断了会话。';
                }
            }
            appInstance_.ws.registerHandler('session-ended', handler_end);
            appInstance_.ws.s({ type: 'create-session', senderId });
